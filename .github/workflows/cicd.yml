name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install dependencies
        run: poetry install

      - name: Run linters and tests
        run: |
          poetry run black --check .
          poetry run pytest

      - name: Extract project name
        id: project_name
        run: |
          NAME=$(poetry run python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['name'].replace('-', '_'))")
          echo "PROJECT_NAME=$NAME" >> $GITHUB_ENV

      - name: Prepare version bump
        if: github.ref == 'refs/heads/main'
        id: bump_version
        run: |
          CURRENT_VERSION="$(poetry version -s)"
          poetry version patch
          NEW_VERSION="$(poetry version -s)"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          INIT_FILE="$PROJECT_NAME/__init__.py"
          if grep -q "^__version__" "$INIT_FILE"; then
            sed -i "s/^__version__ = .*/__version__ = \"$NEW_VERSION\"/" "$INIT_FILE"
          else
            echo "__version__ = \"$NEW_VERSION\"" >> "$INIT_FILE"
          fi

      - name: Push changes
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pyproject.toml docks/__init__.py README.md
          git commit -m "Bump version to $NEW_VERSION and update badge"
          git tag v$NEW_VERSION
          git push origin main --tags

      - name: Build package
        run: poetry build && ls dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: dist/

  publish:
    needs: prepare
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-artifacts
          path: dist/

      - name: (dbg)| tree
        run: tree -L 3
        working-directory: ${{ github.workspace }}

      - name: Poetry config
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry install --with dev

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry run twine upload dist/*